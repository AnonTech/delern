# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'fileutils'

default_platform(:android)

def cirrus_ci_build_number
  return ci_build_number unless ENV['CIRRUS_CI']

  # TODO(dotdoom): get rid of this workaround once build number is available:
  # https://github.com/cirruslabs/cirrus-ci-docs/issues/246.

  fastlane_require 'graphql/client'
  fastlane_require 'graphql/client/http'

  client = GraphQL::Client::HTTP.new('https://api.cirrus-ci.com/graphql')
  schema = GraphQL::Client.load_schema(client)
  client = GraphQL::Client.new(schema: schema, execute: client)
  Kernel.const_set :GithubRepositoryQuery, client.parse(<<-GRAPHQL)
    query($owner: String!, $name: String!) {
      githubRepository(owner: $owner, name: $name) {
        builds(last: 102400) {
          edges {
            node { changeMessage }
          }
        }
      }
    }
  GRAPHQL
  client.query(GithubRepositoryQuery, variables: {
    owner: ENV['CIRRUS_REPO_OWNER'],
    name: ENV['CIRRUS_REPO_NAME'],
  }).data.github_repository.builds.edges.size
end

before_all do |lane|
  if [:build, :publish].include?(lane)
    commits_since_last_tag = changelog_from_git_commits(
      quiet: true,
      # One line per commit, which allows us to easily count them.
      pretty: 'oneline',
      # We push to "master" only when merging a PR, so increment with each merge.
      merge_commit_filtering: 'only_include_merges',
    ).lines.count

    # Add a fixed integer to CI build number, because we drifted away. Outside of
    # CI, usually on a developer's workstation, just use number of commits.
    lane_context[SharedValues::BUILD_NUMBER] = is_ci ?
      Integer(cirrus_ci_build_number) + 5000 :
      number_of_commits

    # If there are any commits since the last tag (ex.: "2.1"), add them as the
    # third version number, turning it into "2.1.42". Otherwise just keep "2.1".
    lane_context[SharedValues::VERSION_NUMBER] = commits_since_last_tag > 0 ?
        '%s.%d' % [last_git_tag, commits_since_last_tag] :
        last_git_tag
  end
end

desc 'Install or upgrade Flutter and Android SDK licenses'
lane :install_dependencies do
  bootstrap_options = {
    flutter_channel: 'beta',
  }

  if ENV.key?('ANDROID_SDK_ROOT')
    # License hashes. These are NOT secret!
    # Copy them from $ANDROID_SDK_ROOT/licenses/ directory for the license
    # agreements you accept.
    bootstrap_options[:android_licenses] = {
      'android-sdk-license' => '24333f8a63b6825ea9c5514f83c2829b004d1fee',
    }
  end

  flutter_bootstrap(bootstrap_options)
end

desc 'Generate files for Intl and built_value and format all files'
lane :generate do
  flutter_generate(
    intl_strings_file: 'lib/l10n/app_localizations.dart',
    intl_strings_locale: 'en_US',
  )
  flutter(args: %w(format .))
end

desc 'Run static analysis on Flutter files'
lane :lint do
  flutter(args: %w(analyze lib))
end

desc 'Replace system-wide Android debug keystore and app-wide GoogleServices'
desc 'with those configured for "delern-debug" Firebase project'
lane :install_debug_keys do
  FileUtils.cp(
    'debug-project/google-services.json',
    '../android/app/',
    verbose: true)
  FileUtils.cp(
    'debug-project/org.dasfoo.delern.debug',
    '../ios/Runner/GoogleService-Info/',
    verbose: true)
  system_wide_android_directory = File.expand_path('~/.android/')
  FileUtils.mkdir_p(system_wide_android_directory)
  FileUtils.cp(
    'debug-project/debug.keystore',
    system_wide_android_directory,
    verbose: true)
end

platform :android do
  desc 'Build a debug APK'
  lane :build do
    flutter_build(debug: true)
  end

  desc 'Build a release AAB and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload to "alpha" track.'
  lane :publish do |options|
    aab = flutter_build(build: 'appbundle')
    supply(
      track: options[:release].empty? ? 'internal' : 'alpha',
      aab: aab,
    )
  end
end

platform :ios do
  desc 'Build a debug iOS package'
  lane :build do
    flutter_build(
      debug: true,
      codesign: false,
    )
  end

  desc 'Build a release iOS package and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload metadata.'
  lane :publish do |options|
    # Set up OS X keychain and switch match to readonly model. This command has
    # no effect outside CI.
    setup_travis

    app_identifier = 'org.dasfoo.delern'

    match(
      type: 'appstore',
      app_identifier: app_identifier,
    )
    # Perform an (otherwise unnecessary) build to:
    # - add version
    # - switch to release mode
    flutter_build
    gym(silent: true, suppress_xcode_output: true)

    unless options[:release].empty?
      # Upload screenshots and metadata.
      upload_to_app_store(
        app_identifier: app_identifier,
        skip_binary_upload: true,
        overwrite_screenshots: true,
        # Skip the HTML report file verification.
        force: true,
      )
    end

    # TODO(dotdoom): set also "changelog".
    pilot(
      ipa: 'build/Runner.ipa',
    )
  end
end

# vim: ft=ruby
